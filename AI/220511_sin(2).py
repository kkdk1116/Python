# -*- coding: utf-8 -*-
"""220511 SIN(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YSjLv3ftNcEzxBazcw0tmGAFT-wkc-es
"""

import numpy as np
import math

def sigmoid(x):
    return (1.0/(1 + math.exp(-x)))

lrate = 0.1
INDIM = 2 # 1.0, x
H1DIM = 5 # 적을 수록 지능 감소
H2DIM = 5
OUTDIM = 1

PTTN_NUM = 7

#사인 함수
#0.0 ~ 1.0    sin 0 = 0, sin 90 = 0.5, sin 180 =1.0 


x = np.array([[1.0, 0.01], #0
              [1.0, 0.17], #30
              [1.0, 0.33], #60
              [1.0, 0.50], #90
              [1.0, 0.67], #120
              [1.0, 0.83], #150 
              [1.0, 0.99]]) #180
#첫번째값은 바이어스텀.

"""
t = np.array([ [1.0, 0.0, 0.0],
               [0.0, 1.0, 0.0],
               [0.0, 0.0, 1.0]
               ])
"""
t = np.array( [0.01, 0.50, 0.87, 1.00, 0.87, 0.50, 0.01] )

w1 = np.zeros([H1DIM, INDIM])
for i in range(H1DIM):
    for j in range(INDIM):
        w1[i][j] = np.random.rand()

w2 = np.zeros([H2DIM, H1DIM])
for i in range(H2DIM):
    for j in range(H1DIM):
        w2[i][j] = np.random.rand()

w3 = np.zeros([OUTDIM, H2DIM])
for i in range(OUTDIM):
    for j in range(H2DIM):
        w3[i][j] = np.random.rand()

y1 = np.zeros(H1DIM)
y2 = np.zeros(H2DIM)
y3 = np.zeros(OUTDIM)

d1 = np.zeros(H1DIM)
d2 = np.zeros(H2DIM)
d3 = np.zeros(OUTDIM)

for epoch in range(30000):
    if epoch % 10 == 0:
        print("epoch : ", epoch)

    for p in range(PTTN_NUM):
        #feed forwarding
        #layer 1 : hiddenlayer1
        for i in range(H1DIM):
            out = 0.0
            for j in range(INDIM):
                out += w1[i][j] * x[p][j]
            y1[i] = sigmoid(out)
        #layer 2 : hiddenlayer2
        for i in range(H2DIM):
            out = 0.0
            for j in range(H1DIM):
                out += w2[i][j] * y1[j]
            y2[i] = sigmoid(out)

        #layer3:outputlayer)
        for i in range(OUTDIM):
            out = 0.0
            for j in range(H2DIM):
                out += w3[i][j] * y2[j]
            y3[i] = sigmoid(out)

        #Back propagation
        #delta(err) for layer 3
            d3[i] = (t[p] - y3[i])

        #delta(err) for layer 2
        for i in range(H2DIM):
            d2[i] = 0.0
            for j in range(OUTDIM):
                d2[i] += d3[j] * w3[j][i]

        #delta(err) for layer 1
        for i in range(H1DIM):
            d1[i] = 0.0
            for j in range(H2DIM):
                d1[i] += d2[j] * w2[j][i]

        # weight adjustment for layer3 outputlayer
        for i in range(OUTDIM):
            for j in range(H2DIM):
                w3[i][j] += lrate * d3[i] * (y3[i] * (1 - y3[i])) * y2[j]

        #weight adjustment for layer2 hiddenlayer
        for i in range(H2DIM):
            for j in range(H1DIM):
                w2[i][j] += lrate * d2[i] * (y2[i] * (1 - y2[i])) * y1[j]

        #weight adjustment for layer1 hidden layer
        for i in range(H1DIM):
            for j in range(INDIM):
                w1[i][j] += lrate * d1[i] * (y1[i] * (1 - y1[i])) * x[p][j]

        if epoch % 10 == 0:
            print(t[p], y3)